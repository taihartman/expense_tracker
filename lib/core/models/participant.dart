import 'dart:math';

/// Participant value object
///
/// Represents a person who can pay for or owe expenses
/// Can be used in per-trip participant lists or as global defaults
class Participant {
  /// Unique identifier (lowercase alphanumeric, e.g., "tai", "khiet")
  final String id;

  /// Display name (e.g., "Tai", "Khiet")
  final String name;

  /// When this participant was added (for per-trip participants)
  final DateTime? createdAt;

  const Participant({
    required this.id,
    required this.name,
    this.createdAt,
  });

  /// Create a participant from a name, auto-generating the ID
  ///
  /// The ID is generated by:
  /// - Converting name to lowercase
  /// - Removing non-alphanumeric characters
  /// - Limiting to 20 characters
  ///
  /// Example: "Sarah Johnson" -> "sarahjohnson"
  factory Participant.fromName(String name) {
    return Participant(
      id: _generateId(name),
      name: name.trim(),
      createdAt: DateTime.now(),
    );
  }

  /// Generate a participant ID from a name
  static String _generateId(String name) {
    final cleaned = name
        .toLowerCase()
        .trim()
        .replaceAll(RegExp(r'[^a-z0-9]'), '');

    if (cleaned.isEmpty) {
      // Fallback for names with no alphanumeric characters
      return 'participant_${DateTime.now().millisecondsSinceEpoch}';
    }

    return cleaned.substring(0, min(20, cleaned.length));
  }

  /// Create a copy with updated fields
  Participant copyWith({
    String? id,
    String? name,
    DateTime? createdAt,
  }) {
    return Participant(
      id: id ?? this.id,
      name: name ?? this.name,
      createdAt: createdAt ?? this.createdAt,
    );
  }

  /// Convert to JSON for Firestore
  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'name': name,
      if (createdAt != null) 'createdAt': createdAt!.toIso8601String(),
    };
  }

  /// Create from JSON
  factory Participant.fromJson(Map<String, dynamic> json) {
    return Participant(
      id: json['id'] as String,
      name: json['name'] as String,
      createdAt: json['createdAt'] != null
          ? DateTime.parse(json['createdAt'] as String)
          : null,
    );
  }

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Participant &&
          runtimeType == other.runtimeType &&
          id == other.id;

  @override
  int get hashCode => id.hashCode;

  @override
  String toString() => 'Participant(id: $id, name: $name, createdAt: $createdAt)';
}
