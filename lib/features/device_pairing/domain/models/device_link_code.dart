import 'package:equatable/equatable.dart';

/// Represents a temporary verification code for device pairing.
///
/// Generated by an existing trip member to grant trip access to a requesting
/// user on a new device. Codes expire after 15 minutes and are one-time use.
class DeviceLinkCode extends Equatable {
  /// Firestore auto-generated document ID
  final String id;

  /// 8-digit code with hyphen (e.g., "1234-5678")
  final String code;

  /// Which trip this grants access to
  final String tripId;

  /// Member name this code was generated FOR (original casing)
  final String memberName;

  /// When code was generated (server timestamp)
  final DateTime createdAt;

  /// When code becomes invalid (createdAt + 15 minutes)
  final DateTime expiresAt;

  /// Whether code has been used
  final bool used;

  /// When code was used (null if unused)
  final DateTime? usedAt;

  const DeviceLinkCode({
    required this.id,
    required this.code,
    required this.tripId,
    required this.memberName,
    required this.createdAt,
    required this.expiresAt,
    required this.used,
    this.usedAt,
  });

  /// Validates the entity fields.
  ///
  /// Returns null if valid, or an error message string if invalid.
  String? validate() {
    if (code.length != 9) {
      return 'Code must be 8 digits in format XXXX-XXXX';
    }
    if (tripId.isEmpty) {
      return 'Trip ID is required';
    }
    if (memberName.isEmpty) {
      return 'Member name is required';
    }
    if (expiresAt.isBefore(createdAt)) {
      return 'Expiry time must be after creation time';
    }
    if (used && usedAt == null) {
      return 'Used codes must have usedAt timestamp';
    }
    return null; // Valid
  }

  /// Returns true if the code has expired (current time is after expiresAt).
  bool get isExpired => DateTime.now().isAfter(expiresAt);

  /// Returns true if the code is valid (not used and not expired).
  bool get isValid => !used && !isExpired;

  /// Returns the duration until code expires.
  ///
  /// Positive duration means code is still valid.
  /// Negative duration means code has expired.
  Duration get timeUntilExpiry => expiresAt.difference(DateTime.now());

  /// Creates a copy with updated fields.
  DeviceLinkCode copyWith({
    String? id,
    String? code,
    String? tripId,
    String? memberName,
    DateTime? createdAt,
    DateTime? expiresAt,
    bool? used,
    DateTime? usedAt,
  }) {
    return DeviceLinkCode(
      id: id ?? this.id,
      code: code ?? this.code,
      tripId: tripId ?? this.tripId,
      memberName: memberName ?? this.memberName,
      createdAt: createdAt ?? this.createdAt,
      expiresAt: expiresAt ?? this.expiresAt,
      used: used ?? this.used,
      usedAt: usedAt ?? this.usedAt,
    );
  }

  /// Converts to map for Firestore storage.
  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'code': code,
      'tripId': tripId,
      'memberName': memberName,
      'createdAt': createdAt,
      'expiresAt': expiresAt,
      'used': used,
      'usedAt': usedAt,
    };
  }

  /// Creates instance from map (Firestore document).
  factory DeviceLinkCode.fromMap(Map<String, dynamic> map) {
    return DeviceLinkCode(
      id: map['id'] as String,
      code: map['code'] as String,
      tripId: map['tripId'] as String,
      memberName: map['memberName'] as String,
      createdAt: map['createdAt'] as DateTime,
      expiresAt: map['expiresAt'] as DateTime,
      used: map['used'] as bool,
      usedAt: map['usedAt'] as DateTime?,
    );
  }

  @override
  List<Object?> get props => [
        id,
        code,
        tripId,
        memberName,
        createdAt,
        expiresAt,
        used,
        usedAt,
      ];
}
