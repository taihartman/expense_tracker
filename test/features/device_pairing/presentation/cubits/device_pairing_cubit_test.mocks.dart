// Mocks generated by Mockito 5.4.6 from annotations
// in expense_tracker/test/features/device_pairing/presentation/cubits/device_pairing_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:expense_tracker/core/services/local_storage_service.dart'
    as _i5;
import 'package:expense_tracker/features/device_pairing/domain/models/device_link_code.dart'
    as _i2;
import 'package:expense_tracker/features/device_pairing/domain/repositories/device_link_code_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDeviceLinkCode_0 extends _i1.SmartFake
    implements _i2.DeviceLinkCode {
  _FakeDeviceLinkCode_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [DeviceLinkCodeRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeviceLinkCodeRepository extends _i1.Mock
    implements _i3.DeviceLinkCodeRepository {
  MockDeviceLinkCodeRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.DeviceLinkCode> generateCode(
    String? tripId,
    String? memberName,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#generateCode, [tripId, memberName]),
            returnValue: _i4.Future<_i2.DeviceLinkCode>.value(
              _FakeDeviceLinkCode_0(
                this,
                Invocation.method(#generateCode, [tripId, memberName]),
              ),
            ),
          )
          as _i4.Future<_i2.DeviceLinkCode>);

  @override
  _i4.Future<_i2.DeviceLinkCode> validateCode(
    String? tripId,
    String? code,
    String? memberName,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#validateCode, [tripId, code, memberName]),
            returnValue: _i4.Future<_i2.DeviceLinkCode>.value(
              _FakeDeviceLinkCode_0(
                this,
                Invocation.method(#validateCode, [tripId, code, memberName]),
              ),
            ),
          )
          as _i4.Future<_i2.DeviceLinkCode>);

  @override
  _i4.Future<void> revokeCode(String? tripId, String? codeId) =>
      (super.noSuchMethod(
            Invocation.method(#revokeCode, [tripId, codeId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<List<_i2.DeviceLinkCode>> getActiveCodes(String? tripId) =>
      (super.noSuchMethod(
            Invocation.method(#getActiveCodes, [tripId]),
            returnValue: _i4.Future<List<_i2.DeviceLinkCode>>.value(
              <_i2.DeviceLinkCode>[],
            ),
          )
          as _i4.Future<List<_i2.DeviceLinkCode>>);

  @override
  _i4.Stream<List<_i2.DeviceLinkCode>> watchActiveCodes(String? tripId) =>
      (super.noSuchMethod(
            Invocation.method(#watchActiveCodes, [tripId]),
            returnValue: _i4.Stream<List<_i2.DeviceLinkCode>>.empty(),
          )
          as _i4.Stream<List<_i2.DeviceLinkCode>>);
}

/// A class which mocks [LocalStorageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalStorageService extends _i1.Mock
    implements _i5.LocalStorageService {
  MockLocalStorageService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> saveSelectedTripId(String? tripId) =>
      (super.noSuchMethod(
            Invocation.method(#saveSelectedTripId, [tripId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> clearSelectedTripId() =>
      (super.noSuchMethod(
            Invocation.method(#clearSelectedTripId, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> addJoinedTrip(String? tripId) =>
      (super.noSuchMethod(
            Invocation.method(#addJoinedTrip, [tripId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  List<String> getJoinedTripIds() =>
      (super.noSuchMethod(
            Invocation.method(#getJoinedTripIds, []),
            returnValue: <String>[],
          )
          as List<String>);

  @override
  _i4.Future<void> removeJoinedTrip(String? tripId) =>
      (super.noSuchMethod(
            Invocation.method(#removeJoinedTrip, [tripId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
