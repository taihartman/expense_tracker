// Mocks generated by Mockito 5.4.6 from annotations
// in expense_tracker/test/features/trips/presentation/cubits/trip_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:expense_tracker/core/services/activity_logger_service.dart'
    as _i7;
import 'package:expense_tracker/core/services/local_storage_service.dart'
    as _i11;
import 'package:expense_tracker/features/categories/domain/models/category.dart'
    as _i3;
import 'package:expense_tracker/features/categories/domain/repositories/category_repository.dart'
    as _i10;
import 'package:expense_tracker/features/expenses/domain/models/expense.dart'
    as _i8;
import 'package:expense_tracker/features/settlements/domain/models/minimal_transfer.dart'
    as _i9;
import 'package:expense_tracker/features/trips/domain/models/trip.dart' as _i2;
import 'package:expense_tracker/features/trips/domain/models/verified_member.dart'
    as _i6;
import 'package:expense_tracker/features/trips/domain/repositories/trip_repository.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTrip_0 extends _i1.SmartFake implements _i2.Trip {
  _FakeTrip_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCategory_1 extends _i1.SmartFake implements _i3.Category {
  _FakeCategory_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [TripRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTripRepository extends _i1.Mock implements _i4.TripRepository {
  MockTripRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Trip> createTrip(_i2.Trip? trip) =>
      (super.noSuchMethod(
            Invocation.method(#createTrip, [trip]),
            returnValue: _i5.Future<_i2.Trip>.value(
              _FakeTrip_0(this, Invocation.method(#createTrip, [trip])),
            ),
          )
          as _i5.Future<_i2.Trip>);

  @override
  _i5.Future<_i2.Trip?> getTripById(String? tripId) =>
      (super.noSuchMethod(
            Invocation.method(#getTripById, [tripId]),
            returnValue: _i5.Future<_i2.Trip?>.value(),
          )
          as _i5.Future<_i2.Trip?>);

  @override
  _i5.Stream<List<_i2.Trip>> getAllTrips() =>
      (super.noSuchMethod(
            Invocation.method(#getAllTrips, []),
            returnValue: _i5.Stream<List<_i2.Trip>>.empty(),
          )
          as _i5.Stream<List<_i2.Trip>>);

  @override
  _i5.Future<_i2.Trip> updateTrip(_i2.Trip? trip) =>
      (super.noSuchMethod(
            Invocation.method(#updateTrip, [trip]),
            returnValue: _i5.Future<_i2.Trip>.value(
              _FakeTrip_0(this, Invocation.method(#updateTrip, [trip])),
            ),
          )
          as _i5.Future<_i2.Trip>);

  @override
  _i5.Future<void> deleteTrip(String? tripId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteTrip, [tripId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<bool> tripExists(String? tripId) =>
      (super.noSuchMethod(
            Invocation.method(#tripExists, [tripId]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<void> addVerifiedMember({
    required String? tripId,
    required String? participantId,
    required String? participantName,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#addVerifiedMember, [], {
              #tripId: tripId,
              #participantId: participantId,
              #participantName: participantName,
            }),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<List<_i6.VerifiedMember>> getVerifiedMembers(String? tripId) =>
      (super.noSuchMethod(
            Invocation.method(#getVerifiedMembers, [tripId]),
            returnValue: _i5.Future<List<_i6.VerifiedMember>>.value(
              <_i6.VerifiedMember>[],
            ),
          )
          as _i5.Future<List<_i6.VerifiedMember>>);

  @override
  _i5.Future<void> removeVerifiedMember({
    required String? tripId,
    required String? participantId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#removeVerifiedMember, [], {
              #tripId: tripId,
              #participantId: participantId,
            }),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}

/// A class which mocks [ActivityLoggerService].
///
/// See the documentation for Mockito's code generation for more information.
class MockActivityLoggerService extends _i1.Mock
    implements _i7.ActivityLoggerService {
  MockActivityLoggerService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> logExpenseAdded(_i8.Expense? expense, String? actorName) =>
      (super.noSuchMethod(
            Invocation.method(#logExpenseAdded, [expense, actorName]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> logExpenseEdited(
    _i8.Expense? oldExpense,
    _i8.Expense? newExpense,
    String? actorName,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#logExpenseEdited, [
              oldExpense,
              newExpense,
              actorName,
            ]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> logExpenseDeleted(_i8.Expense? expense, String? actorName) =>
      (super.noSuchMethod(
            Invocation.method(#logExpenseDeleted, [expense, actorName]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> logTransferSettled(
    _i9.MinimalTransfer? transfer,
    String? actorName,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#logTransferSettled, [transfer, actorName]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> logTransferUnsettled(
    _i9.MinimalTransfer? transfer,
    String? actorName,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#logTransferUnsettled, [transfer, actorName]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> logMemberJoined({
    required String? tripId,
    required String? memberName,
    required String? joinMethod,
    String? inviterId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#logMemberJoined, [], {
              #tripId: tripId,
              #memberName: memberName,
              #joinMethod: joinMethod,
              #inviterId: inviterId,
            }),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> logTripCreated(_i2.Trip? trip, String? creatorName) =>
      (super.noSuchMethod(
            Invocation.method(#logTripCreated, [trip, creatorName]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> logTripUpdated(
    _i2.Trip? oldTrip,
    _i2.Trip? newTrip,
    String? actorName,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#logTripUpdated, [oldTrip, newTrip, actorName]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> logTripDeleted(_i2.Trip? trip, String? actorName) =>
      (super.noSuchMethod(
            Invocation.method(#logTripDeleted, [trip, actorName]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> logTripArchived(_i2.Trip? trip, String? actorName) =>
      (super.noSuchMethod(
            Invocation.method(#logTripArchived, [trip, actorName]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> logTripUnarchived(_i2.Trip? trip, String? actorName) =>
      (super.noSuchMethod(
            Invocation.method(#logTripUnarchived, [trip, actorName]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> logParticipantAdded({
    required String? tripId,
    required String? participantName,
    required String? actorName,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#logParticipantAdded, [], {
              #tripId: tripId,
              #participantName: participantName,
              #actorName: actorName,
            }),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> logParticipantRemoved({
    required String? tripId,
    required String? participantName,
    required String? actorName,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#logParticipantRemoved, [], {
              #tripId: tripId,
              #participantName: participantName,
              #actorName: actorName,
            }),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> logDeviceVerified({
    required String? tripId,
    required String? memberName,
    required String? deviceCode,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#logDeviceVerified, [], {
              #tripId: tripId,
              #memberName: memberName,
              #deviceCode: deviceCode,
            }),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> logRecoveryCodeUsed({
    required String? tripId,
    required String? memberName,
    required int? usageCount,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#logRecoveryCodeUsed, [], {
              #tripId: tripId,
              #memberName: memberName,
              #usageCount: usageCount,
            }),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  void clearCache() => super.noSuchMethod(
    Invocation.method(#clearCache, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [CategoryRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCategoryRepository extends _i1.Mock
    implements _i10.CategoryRepository {
  MockCategoryRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Stream<List<_i3.Category>> getTopCategories({int? limit = 5}) =>
      (super.noSuchMethod(
            Invocation.method(#getTopCategories, [], {#limit: limit}),
            returnValue: _i5.Stream<List<_i3.Category>>.empty(),
          )
          as _i5.Stream<List<_i3.Category>>);

  @override
  _i5.Stream<List<_i3.Category>> searchCategories(String? query) =>
      (super.noSuchMethod(
            Invocation.method(#searchCategories, [query]),
            returnValue: _i5.Stream<List<_i3.Category>>.empty(),
          )
          as _i5.Stream<List<_i3.Category>>);

  @override
  _i5.Future<_i3.Category?> getCategoryById(String? categoryId) =>
      (super.noSuchMethod(
            Invocation.method(#getCategoryById, [categoryId]),
            returnValue: _i5.Future<_i3.Category?>.value(),
          )
          as _i5.Future<_i3.Category?>);

  @override
  _i5.Future<_i3.Category> createCategory({
    required String? name,
    String? icon = 'label',
    required String? color,
    required String? userId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createCategory, [], {
              #name: name,
              #icon: icon,
              #color: color,
              #userId: userId,
            }),
            returnValue: _i5.Future<_i3.Category>.value(
              _FakeCategory_1(
                this,
                Invocation.method(#createCategory, [], {
                  #name: name,
                  #icon: icon,
                  #color: color,
                  #userId: userId,
                }),
              ),
            ),
          )
          as _i5.Future<_i3.Category>);

  @override
  _i5.Future<void> incrementCategoryUsage(String? categoryId) =>
      (super.noSuchMethod(
            Invocation.method(#incrementCategoryUsage, [categoryId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<bool> categoryExists(String? name) =>
      (super.noSuchMethod(
            Invocation.method(#categoryExists, [name]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<bool> canUserCreateCategory(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#canUserCreateCategory, [userId]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<List<_i3.Category>> seedDefaultCategories() =>
      (super.noSuchMethod(
            Invocation.method(#seedDefaultCategories, []),
            returnValue: _i5.Future<List<_i3.Category>>.value(<_i3.Category>[]),
          )
          as _i5.Future<List<_i3.Category>>);

  @override
  _i5.Future<List<_i10.SimilarCategoryMatch>> findSimilarCategories(
    String? query, {
    double? threshold = 0.8,
    int? limit = 3,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #findSimilarCategories,
              [query],
              {#threshold: threshold, #limit: limit},
            ),
            returnValue: _i5.Future<List<_i10.SimilarCategoryMatch>>.value(
              <_i10.SimilarCategoryMatch>[],
            ),
          )
          as _i5.Future<List<_i10.SimilarCategoryMatch>>);

  @override
  _i5.Future<String?> getMostPopularIcon(String? categoryId) =>
      (super.noSuchMethod(
            Invocation.method(#getMostPopularIcon, [categoryId]),
            returnValue: _i5.Future<String?>.value(),
          )
          as _i5.Future<String?>);
}

/// A class which mocks [LocalStorageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalStorageService extends _i1.Mock
    implements _i11.LocalStorageService {
  MockLocalStorageService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> saveSelectedTripId(String? tripId) =>
      (super.noSuchMethod(
            Invocation.method(#saveSelectedTripId, [tripId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> clearSelectedTripId() =>
      (super.noSuchMethod(
            Invocation.method(#clearSelectedTripId, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> addJoinedTrip(String? tripId) =>
      (super.noSuchMethod(
            Invocation.method(#addJoinedTrip, [tripId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  bool verifyJoinedTrip(String? tripId) =>
      (super.noSuchMethod(
            Invocation.method(#verifyJoinedTrip, [tripId]),
            returnValue: false,
          )
          as bool);

  @override
  List<String> getJoinedTripIds() =>
      (super.noSuchMethod(
            Invocation.method(#getJoinedTripIds, []),
            returnValue: <String>[],
          )
          as List<String>);

  @override
  _i5.Future<void> removeJoinedTrip(String? tripId) =>
      (super.noSuchMethod(
            Invocation.method(#removeJoinedTrip, [tripId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> saveUserIdentityForTrip(
    String? tripId,
    String? participantId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#saveUserIdentityForTrip, [
              tripId,
              participantId,
            ]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  String? getUserIdentityForTrip(String? tripId) =>
      (super.noSuchMethod(Invocation.method(#getUserIdentityForTrip, [tripId]))
          as String?);

  @override
  _i5.Future<void> removeUserIdentityForTrip(String? tripId) =>
      (super.noSuchMethod(
            Invocation.method(#removeUserIdentityForTrip, [tripId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> clearAllUserIdentities() =>
      (super.noSuchMethod(
            Invocation.method(#clearAllUserIdentities, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}
