// Mocks generated by Mockito 5.4.6 from annotations
// in expense_tracker/test/features/trips/presentation/cubits/trip_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:expense_tracker/core/services/local_storage_service.dart'
    as _i10;
import 'package:expense_tracker/features/categories/domain/models/category.dart'
    as _i3;
import 'package:expense_tracker/features/categories/domain/repositories/category_repository.dart'
    as _i9;
import 'package:expense_tracker/features/trips/domain/models/activity_log.dart'
    as _i7;
import 'package:expense_tracker/features/trips/domain/models/trip.dart' as _i2;
import 'package:expense_tracker/features/trips/domain/repositories/activity_log_repository.dart'
    as _i6;
import 'package:expense_tracker/features/trips/domain/repositories/trip_repository.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTrip_0 extends _i1.SmartFake implements _i2.Trip {
  _FakeTrip_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCategory_1 extends _i1.SmartFake implements _i3.Category {
  _FakeCategory_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [TripRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTripRepository extends _i1.Mock implements _i4.TripRepository {
  MockTripRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Trip> createTrip(_i2.Trip? trip) =>
      (super.noSuchMethod(
            Invocation.method(#createTrip, [trip]),
            returnValue: _i5.Future<_i2.Trip>.value(
              _FakeTrip_0(this, Invocation.method(#createTrip, [trip])),
            ),
          )
          as _i5.Future<_i2.Trip>);

  @override
  _i5.Future<_i2.Trip?> getTripById(String? tripId) =>
      (super.noSuchMethod(
            Invocation.method(#getTripById, [tripId]),
            returnValue: _i5.Future<_i2.Trip?>.value(),
          )
          as _i5.Future<_i2.Trip?>);

  @override
  _i5.Stream<List<_i2.Trip>> getAllTrips() =>
      (super.noSuchMethod(
            Invocation.method(#getAllTrips, []),
            returnValue: _i5.Stream<List<_i2.Trip>>.empty(),
          )
          as _i5.Stream<List<_i2.Trip>>);

  @override
  _i5.Future<_i2.Trip> updateTrip(_i2.Trip? trip) =>
      (super.noSuchMethod(
            Invocation.method(#updateTrip, [trip]),
            returnValue: _i5.Future<_i2.Trip>.value(
              _FakeTrip_0(this, Invocation.method(#updateTrip, [trip])),
            ),
          )
          as _i5.Future<_i2.Trip>);

  @override
  _i5.Future<void> deleteTrip(String? tripId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteTrip, [tripId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<bool> tripExists(String? tripId) =>
      (super.noSuchMethod(
            Invocation.method(#tripExists, [tripId]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);
}

/// A class which mocks [ActivityLogRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockActivityLogRepository extends _i1.Mock
    implements _i6.ActivityLogRepository {
  MockActivityLogRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<String> addLog(_i7.ActivityLog? log) =>
      (super.noSuchMethod(
            Invocation.method(#addLog, [log]),
            returnValue: _i5.Future<String>.value(
              _i8.dummyValue<String>(this, Invocation.method(#addLog, [log])),
            ),
          )
          as _i5.Future<String>);

  @override
  _i5.Stream<List<_i7.ActivityLog>> getActivityLogs(
    String? tripId, {
    int? limit = 50,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getActivityLogs, [tripId], {#limit: limit}),
            returnValue: _i5.Stream<List<_i7.ActivityLog>>.empty(),
          )
          as _i5.Stream<List<_i7.ActivityLog>>);
}

/// A class which mocks [CategoryRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCategoryRepository extends _i1.Mock
    implements _i9.CategoryRepository {
  MockCategoryRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Category> createCategory(_i3.Category? category) =>
      (super.noSuchMethod(
            Invocation.method(#createCategory, [category]),
            returnValue: _i5.Future<_i3.Category>.value(
              _FakeCategory_1(
                this,
                Invocation.method(#createCategory, [category]),
              ),
            ),
          )
          as _i5.Future<_i3.Category>);

  @override
  _i5.Future<_i3.Category?> getCategoryById(String? categoryId) =>
      (super.noSuchMethod(
            Invocation.method(#getCategoryById, [categoryId]),
            returnValue: _i5.Future<_i3.Category?>.value(),
          )
          as _i5.Future<_i3.Category?>);

  @override
  _i5.Stream<List<_i3.Category>> getCategoriesByTrip(String? tripId) =>
      (super.noSuchMethod(
            Invocation.method(#getCategoriesByTrip, [tripId]),
            returnValue: _i5.Stream<List<_i3.Category>>.empty(),
          )
          as _i5.Stream<List<_i3.Category>>);

  @override
  _i5.Future<_i3.Category> updateCategory(_i3.Category? category) =>
      (super.noSuchMethod(
            Invocation.method(#updateCategory, [category]),
            returnValue: _i5.Future<_i3.Category>.value(
              _FakeCategory_1(
                this,
                Invocation.method(#updateCategory, [category]),
              ),
            ),
          )
          as _i5.Future<_i3.Category>);

  @override
  _i5.Future<void> deleteCategory(String? categoryId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteCategory, [categoryId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<bool> categoryExists(String? categoryId) =>
      (super.noSuchMethod(
            Invocation.method(#categoryExists, [categoryId]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<List<_i3.Category>> seedDefaultCategories(String? tripId) =>
      (super.noSuchMethod(
            Invocation.method(#seedDefaultCategories, [tripId]),
            returnValue: _i5.Future<List<_i3.Category>>.value(<_i3.Category>[]),
          )
          as _i5.Future<List<_i3.Category>>);
}

/// A class which mocks [LocalStorageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalStorageService extends _i1.Mock
    implements _i10.LocalStorageService {
  MockLocalStorageService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> saveSelectedTripId(String? tripId) =>
      (super.noSuchMethod(
            Invocation.method(#saveSelectedTripId, [tripId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> clearSelectedTripId() =>
      (super.noSuchMethod(
            Invocation.method(#clearSelectedTripId, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> addJoinedTrip(String? tripId) =>
      (super.noSuchMethod(
            Invocation.method(#addJoinedTrip, [tripId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  List<String> getJoinedTripIds() =>
      (super.noSuchMethod(
            Invocation.method(#getJoinedTripIds, []),
            returnValue: <String>[],
          )
          as List<String>);

  @override
  _i5.Future<void> removeJoinedTrip(String? tripId) =>
      (super.noSuchMethod(
            Invocation.method(#removeJoinedTrip, [tripId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}
