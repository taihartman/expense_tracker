// Mocks generated by Mockito 5.4.6 from annotations
// in expense_tracker/test/features/categories/data/category_customization_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:cloud_firestore/cloud_firestore.dart' as _i2;
import 'package:expense_tracker/shared/services/firestore_service.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFirebaseFirestore_0 extends _i1.SmartFake
    implements _i2.FirebaseFirestore {
  _FakeFirebaseFirestore_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCollectionReference_1<T extends Object?> extends _i1.SmartFake
    implements _i2.CollectionReference<T> {
  _FakeCollectionReference_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFieldValue_2 extends _i1.SmartFake implements _i2.FieldValue {
  _FakeFieldValue_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTimestamp_3 extends _i1.SmartFake implements _i2.Timestamp {
  _FakeTimestamp_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeWriteBatch_4 extends _i1.SmartFake implements _i2.WriteBatch {
  _FakeWriteBatch_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFuture_5<T1> extends _i1.SmartFake implements _i3.Future<T1> {
  _FakeFuture_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDocumentReference_6<T extends Object?> extends _i1.SmartFake
    implements _i2.DocumentReference<T> {
  _FakeDocumentReference_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeQuery_7<T extends Object?> extends _i1.SmartFake
    implements _i2.Query<T> {
  _FakeQuery_7(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeQuerySnapshot_8<T extends Object?> extends _i1.SmartFake
    implements _i2.QuerySnapshot<T> {
  _FakeQuerySnapshot_8(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAggregateQuery_9 extends _i1.SmartFake
    implements _i2.AggregateQuery {
  _FakeAggregateQuery_9(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDocumentSnapshot_10<T extends Object?> extends _i1.SmartFake
    implements _i2.DocumentSnapshot<T> {
  _FakeDocumentSnapshot_10(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSnapshotMetadata_11 extends _i1.SmartFake
    implements _i2.SnapshotMetadata {
  _FakeSnapshotMetadata_11(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [FirestoreService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirestoreService extends _i1.Mock implements _i4.FirestoreService {
  MockFirestoreService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FirebaseFirestore get firestore =>
      (super.noSuchMethod(
            Invocation.getter(#firestore),
            returnValue: _FakeFirebaseFirestore_0(
              this,
              Invocation.getter(#firestore),
            ),
          )
          as _i2.FirebaseFirestore);

  @override
  _i2.CollectionReference<Object?> get trips =>
      (super.noSuchMethod(
            Invocation.getter(#trips),
            returnValue: _FakeCollectionReference_1<Object?>(
              this,
              Invocation.getter(#trips),
            ),
          )
          as _i2.CollectionReference<Object?>);

  @override
  _i2.CollectionReference<Object?> get expenses =>
      (super.noSuchMethod(
            Invocation.getter(#expenses),
            returnValue: _FakeCollectionReference_1<Object?>(
              this,
              Invocation.getter(#expenses),
            ),
          )
          as _i2.CollectionReference<Object?>);

  @override
  _i2.CollectionReference<Object?> get categories =>
      (super.noSuchMethod(
            Invocation.getter(#categories),
            returnValue: _FakeCollectionReference_1<Object?>(
              this,
              Invocation.getter(#categories),
            ),
          )
          as _i2.CollectionReference<Object?>);

  @override
  _i2.CollectionReference<Object?> get categoryIconPreferences =>
      (super.noSuchMethod(
            Invocation.getter(#categoryIconPreferences),
            returnValue: _FakeCollectionReference_1<Object?>(
              this,
              Invocation.getter(#categoryIconPreferences),
            ),
          )
          as _i2.CollectionReference<Object?>);

  @override
  _i2.CollectionReference<Object?> get exchangeRates =>
      (super.noSuchMethod(
            Invocation.getter(#exchangeRates),
            returnValue: _FakeCollectionReference_1<Object?>(
              this,
              Invocation.getter(#exchangeRates),
            ),
          )
          as _i2.CollectionReference<Object?>);

  @override
  _i2.CollectionReference<Object?> get settlements =>
      (super.noSuchMethod(
            Invocation.getter(#settlements),
            returnValue: _FakeCollectionReference_1<Object?>(
              this,
              Invocation.getter(#settlements),
            ),
          )
          as _i2.CollectionReference<Object?>);

  @override
  _i2.CollectionReference<Object?> get settlementSummaries =>
      (super.noSuchMethod(
            Invocation.getter(#settlementSummaries),
            returnValue: _FakeCollectionReference_1<Object?>(
              this,
              Invocation.getter(#settlementSummaries),
            ),
          )
          as _i2.CollectionReference<Object?>);

  @override
  _i2.CollectionReference<Object?> get pairwiseDebts =>
      (super.noSuchMethod(
            Invocation.getter(#pairwiseDebts),
            returnValue: _FakeCollectionReference_1<Object?>(
              this,
              Invocation.getter(#pairwiseDebts),
            ),
          )
          as _i2.CollectionReference<Object?>);

  @override
  _i2.CollectionReference<Object?> get minimalTransfers =>
      (super.noSuchMethod(
            Invocation.getter(#minimalTransfers),
            returnValue: _FakeCollectionReference_1<Object?>(
              this,
              Invocation.getter(#minimalTransfers),
            ),
          )
          as _i2.CollectionReference<Object?>);

  @override
  _i2.FieldValue get serverTimestamp =>
      (super.noSuchMethod(
            Invocation.getter(#serverTimestamp),
            returnValue: _FakeFieldValue_2(
              this,
              Invocation.getter(#serverTimestamp),
            ),
          )
          as _i2.FieldValue);

  @override
  _i2.Timestamp get now =>
      (super.noSuchMethod(
            Invocation.getter(#now),
            returnValue: _FakeTimestamp_3(this, Invocation.getter(#now)),
          )
          as _i2.Timestamp);

  @override
  _i2.WriteBatch batch() =>
      (super.noSuchMethod(
            Invocation.method(#batch, []),
            returnValue: _FakeWriteBatch_4(this, Invocation.method(#batch, [])),
          )
          as _i2.WriteBatch);

  @override
  _i3.Future<T> runTransaction<T>(
    _i2.TransactionHandler<T>? transactionHandler, {
    Duration? timeout = const Duration(seconds: 30),
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #runTransaction,
              [transactionHandler],
              {#timeout: timeout},
            ),
            returnValue:
                _i5.ifNotNull(
                  _i5.dummyValueOrNull<T>(
                    this,
                    Invocation.method(
                      #runTransaction,
                      [transactionHandler],
                      {#timeout: timeout},
                    ),
                  ),
                  (T v) => _i3.Future<T>.value(v),
                ) ??
                _FakeFuture_5<T>(
                  this,
                  Invocation.method(
                    #runTransaction,
                    [transactionHandler],
                    {#timeout: timeout},
                  ),
                ),
          )
          as _i3.Future<T>);
}

/// A class which mocks [CollectionReference].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockCollectionRef extends _i1.Mock
    implements _i2.CollectionReference<Map<String, dynamic>> {
  MockCollectionRef() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id =>
      (super.noSuchMethod(
            Invocation.getter(#id),
            returnValue: _i5.dummyValue<String>(this, Invocation.getter(#id)),
          )
          as String);

  @override
  String get path =>
      (super.noSuchMethod(
            Invocation.getter(#path),
            returnValue: _i5.dummyValue<String>(this, Invocation.getter(#path)),
          )
          as String);

  @override
  _i2.FirebaseFirestore get firestore =>
      (super.noSuchMethod(
            Invocation.getter(#firestore),
            returnValue: _FakeFirebaseFirestore_0(
              this,
              Invocation.getter(#firestore),
            ),
          )
          as _i2.FirebaseFirestore);

  @override
  Map<String, dynamic> get parameters =>
      (super.noSuchMethod(
            Invocation.getter(#parameters),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  _i3.Future<_i2.DocumentReference<Map<String, dynamic>>> add(
    Map<String, dynamic>? data,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#add, [data]),
            returnValue:
                _i3.Future<_i2.DocumentReference<Map<String, dynamic>>>.value(
                  _FakeDocumentReference_6<Map<String, dynamic>>(
                    this,
                    Invocation.method(#add, [data]),
                  ),
                ),
          )
          as _i3.Future<_i2.DocumentReference<Map<String, dynamic>>>);

  @override
  _i2.DocumentReference<Map<String, dynamic>> doc([String? path]) =>
      (super.noSuchMethod(
            Invocation.method(#doc, [path]),
            returnValue: _FakeDocumentReference_6<Map<String, dynamic>>(
              this,
              Invocation.method(#doc, [path]),
            ),
          )
          as _i2.DocumentReference<Map<String, dynamic>>);

  @override
  _i2.CollectionReference<R> withConverter<R extends Object?>({
    required _i2.FromFirestore<R>? fromFirestore,
    required _i2.ToFirestore<R>? toFirestore,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#withConverter, [], {
              #fromFirestore: fromFirestore,
              #toFirestore: toFirestore,
            }),
            returnValue: _FakeCollectionReference_1<R>(
              this,
              Invocation.method(#withConverter, [], {
                #fromFirestore: fromFirestore,
                #toFirestore: toFirestore,
              }),
            ),
          )
          as _i2.CollectionReference<R>);

  @override
  _i2.Query<Map<String, dynamic>> endAtDocument(
    _i2.DocumentSnapshot<Object?>? documentSnapshot,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#endAtDocument, [documentSnapshot]),
            returnValue: _FakeQuery_7<Map<String, dynamic>>(
              this,
              Invocation.method(#endAtDocument, [documentSnapshot]),
            ),
          )
          as _i2.Query<Map<String, dynamic>>);

  @override
  _i2.Query<Map<String, dynamic>> endAt(Iterable<Object?>? values) =>
      (super.noSuchMethod(
            Invocation.method(#endAt, [values]),
            returnValue: _FakeQuery_7<Map<String, dynamic>>(
              this,
              Invocation.method(#endAt, [values]),
            ),
          )
          as _i2.Query<Map<String, dynamic>>);

  @override
  _i2.Query<Map<String, dynamic>> endBeforeDocument(
    _i2.DocumentSnapshot<Object?>? documentSnapshot,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#endBeforeDocument, [documentSnapshot]),
            returnValue: _FakeQuery_7<Map<String, dynamic>>(
              this,
              Invocation.method(#endBeforeDocument, [documentSnapshot]),
            ),
          )
          as _i2.Query<Map<String, dynamic>>);

  @override
  _i2.Query<Map<String, dynamic>> endBefore(Iterable<Object?>? values) =>
      (super.noSuchMethod(
            Invocation.method(#endBefore, [values]),
            returnValue: _FakeQuery_7<Map<String, dynamic>>(
              this,
              Invocation.method(#endBefore, [values]),
            ),
          )
          as _i2.Query<Map<String, dynamic>>);

  @override
  _i3.Future<_i2.QuerySnapshot<Map<String, dynamic>>> get([
    _i2.GetOptions? options,
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#get, [options]),
            returnValue:
                _i3.Future<_i2.QuerySnapshot<Map<String, dynamic>>>.value(
                  _FakeQuerySnapshot_8<Map<String, dynamic>>(
                    this,
                    Invocation.method(#get, [options]),
                  ),
                ),
          )
          as _i3.Future<_i2.QuerySnapshot<Map<String, dynamic>>>);

  @override
  _i2.Query<Map<String, dynamic>> limit(int? limit) =>
      (super.noSuchMethod(
            Invocation.method(#limit, [limit]),
            returnValue: _FakeQuery_7<Map<String, dynamic>>(
              this,
              Invocation.method(#limit, [limit]),
            ),
          )
          as _i2.Query<Map<String, dynamic>>);

  @override
  _i2.Query<Map<String, dynamic>> limitToLast(int? limit) =>
      (super.noSuchMethod(
            Invocation.method(#limitToLast, [limit]),
            returnValue: _FakeQuery_7<Map<String, dynamic>>(
              this,
              Invocation.method(#limitToLast, [limit]),
            ),
          )
          as _i2.Query<Map<String, dynamic>>);

  @override
  _i3.Stream<_i2.QuerySnapshot<Map<String, dynamic>>> snapshots({
    bool? includeMetadataChanges = false,
    _i2.ListenSource? source = _i2.ListenSource.defaultSource,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#snapshots, [], {
              #includeMetadataChanges: includeMetadataChanges,
              #source: source,
            }),
            returnValue:
                _i3.Stream<_i2.QuerySnapshot<Map<String, dynamic>>>.empty(),
          )
          as _i3.Stream<_i2.QuerySnapshot<Map<String, dynamic>>>);

  @override
  _i2.Query<Map<String, dynamic>> orderBy(
    Object? field, {
    bool? descending = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#orderBy, [field], {#descending: descending}),
            returnValue: _FakeQuery_7<Map<String, dynamic>>(
              this,
              Invocation.method(#orderBy, [field], {#descending: descending}),
            ),
          )
          as _i2.Query<Map<String, dynamic>>);

  @override
  _i2.Query<Map<String, dynamic>> startAfterDocument(
    _i2.DocumentSnapshot<Object?>? documentSnapshot,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#startAfterDocument, [documentSnapshot]),
            returnValue: _FakeQuery_7<Map<String, dynamic>>(
              this,
              Invocation.method(#startAfterDocument, [documentSnapshot]),
            ),
          )
          as _i2.Query<Map<String, dynamic>>);

  @override
  _i2.Query<Map<String, dynamic>> startAfter(Iterable<Object?>? values) =>
      (super.noSuchMethod(
            Invocation.method(#startAfter, [values]),
            returnValue: _FakeQuery_7<Map<String, dynamic>>(
              this,
              Invocation.method(#startAfter, [values]),
            ),
          )
          as _i2.Query<Map<String, dynamic>>);

  @override
  _i2.Query<Map<String, dynamic>> startAtDocument(
    _i2.DocumentSnapshot<Object?>? documentSnapshot,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#startAtDocument, [documentSnapshot]),
            returnValue: _FakeQuery_7<Map<String, dynamic>>(
              this,
              Invocation.method(#startAtDocument, [documentSnapshot]),
            ),
          )
          as _i2.Query<Map<String, dynamic>>);

  @override
  _i2.Query<Map<String, dynamic>> startAt(Iterable<Object?>? values) =>
      (super.noSuchMethod(
            Invocation.method(#startAt, [values]),
            returnValue: _FakeQuery_7<Map<String, dynamic>>(
              this,
              Invocation.method(#startAt, [values]),
            ),
          )
          as _i2.Query<Map<String, dynamic>>);

  @override
  _i2.Query<Map<String, dynamic>> where(
    Object? field, {
    Object? isEqualTo,
    Object? isNotEqualTo,
    Object? isLessThan,
    Object? isLessThanOrEqualTo,
    Object? isGreaterThan,
    Object? isGreaterThanOrEqualTo,
    Object? arrayContains,
    Iterable<Object?>? arrayContainsAny,
    Iterable<Object?>? whereIn,
    Iterable<Object?>? whereNotIn,
    bool? isNull,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #where,
              [field],
              {
                #isEqualTo: isEqualTo,
                #isNotEqualTo: isNotEqualTo,
                #isLessThan: isLessThan,
                #isLessThanOrEqualTo: isLessThanOrEqualTo,
                #isGreaterThan: isGreaterThan,
                #isGreaterThanOrEqualTo: isGreaterThanOrEqualTo,
                #arrayContains: arrayContains,
                #arrayContainsAny: arrayContainsAny,
                #whereIn: whereIn,
                #whereNotIn: whereNotIn,
                #isNull: isNull,
              },
            ),
            returnValue: _FakeQuery_7<Map<String, dynamic>>(
              this,
              Invocation.method(
                #where,
                [field],
                {
                  #isEqualTo: isEqualTo,
                  #isNotEqualTo: isNotEqualTo,
                  #isLessThan: isLessThan,
                  #isLessThanOrEqualTo: isLessThanOrEqualTo,
                  #isGreaterThan: isGreaterThan,
                  #isGreaterThanOrEqualTo: isGreaterThanOrEqualTo,
                  #arrayContains: arrayContains,
                  #arrayContainsAny: arrayContainsAny,
                  #whereIn: whereIn,
                  #whereNotIn: whereNotIn,
                  #isNull: isNull,
                },
              ),
            ),
          )
          as _i2.Query<Map<String, dynamic>>);

  @override
  _i2.AggregateQuery count() =>
      (super.noSuchMethod(
            Invocation.method(#count, []),
            returnValue: _FakeAggregateQuery_9(
              this,
              Invocation.method(#count, []),
            ),
          )
          as _i2.AggregateQuery);

  @override
  _i2.AggregateQuery aggregate(
    _i2.AggregateField? aggregateField1, [
    _i2.AggregateField? aggregateField2,
    _i2.AggregateField? aggregateField3,
    _i2.AggregateField? aggregateField4,
    _i2.AggregateField? aggregateField5,
    _i2.AggregateField? aggregateField6,
    _i2.AggregateField? aggregateField7,
    _i2.AggregateField? aggregateField8,
    _i2.AggregateField? aggregateField9,
    _i2.AggregateField? aggregateField10,
    _i2.AggregateField? aggregateField11,
    _i2.AggregateField? aggregateField12,
    _i2.AggregateField? aggregateField13,
    _i2.AggregateField? aggregateField14,
    _i2.AggregateField? aggregateField15,
    _i2.AggregateField? aggregateField16,
    _i2.AggregateField? aggregateField17,
    _i2.AggregateField? aggregateField18,
    _i2.AggregateField? aggregateField19,
    _i2.AggregateField? aggregateField20,
    _i2.AggregateField? aggregateField21,
    _i2.AggregateField? aggregateField22,
    _i2.AggregateField? aggregateField23,
    _i2.AggregateField? aggregateField24,
    _i2.AggregateField? aggregateField25,
    _i2.AggregateField? aggregateField26,
    _i2.AggregateField? aggregateField27,
    _i2.AggregateField? aggregateField28,
    _i2.AggregateField? aggregateField29,
    _i2.AggregateField? aggregateField30,
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#aggregate, [
              aggregateField1,
              aggregateField2,
              aggregateField3,
              aggregateField4,
              aggregateField5,
              aggregateField6,
              aggregateField7,
              aggregateField8,
              aggregateField9,
              aggregateField10,
              aggregateField11,
              aggregateField12,
              aggregateField13,
              aggregateField14,
              aggregateField15,
              aggregateField16,
              aggregateField17,
              aggregateField18,
              aggregateField19,
              aggregateField20,
              aggregateField21,
              aggregateField22,
              aggregateField23,
              aggregateField24,
              aggregateField25,
              aggregateField26,
              aggregateField27,
              aggregateField28,
              aggregateField29,
              aggregateField30,
            ]),
            returnValue: _FakeAggregateQuery_9(
              this,
              Invocation.method(#aggregate, [
                aggregateField1,
                aggregateField2,
                aggregateField3,
                aggregateField4,
                aggregateField5,
                aggregateField6,
                aggregateField7,
                aggregateField8,
                aggregateField9,
                aggregateField10,
                aggregateField11,
                aggregateField12,
                aggregateField13,
                aggregateField14,
                aggregateField15,
                aggregateField16,
                aggregateField17,
                aggregateField18,
                aggregateField19,
                aggregateField20,
                aggregateField21,
                aggregateField22,
                aggregateField23,
                aggregateField24,
                aggregateField25,
                aggregateField26,
                aggregateField27,
                aggregateField28,
                aggregateField29,
                aggregateField30,
              ]),
            ),
          )
          as _i2.AggregateQuery);
}

/// A class which mocks [DocumentReference].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockDocumentRef extends _i1.Mock
    implements _i2.DocumentReference<Map<String, dynamic>> {
  MockDocumentRef() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FirebaseFirestore get firestore =>
      (super.noSuchMethod(
            Invocation.getter(#firestore),
            returnValue: _FakeFirebaseFirestore_0(
              this,
              Invocation.getter(#firestore),
            ),
          )
          as _i2.FirebaseFirestore);

  @override
  String get id =>
      (super.noSuchMethod(
            Invocation.getter(#id),
            returnValue: _i5.dummyValue<String>(this, Invocation.getter(#id)),
          )
          as String);

  @override
  _i2.CollectionReference<Map<String, dynamic>> get parent =>
      (super.noSuchMethod(
            Invocation.getter(#parent),
            returnValue: _FakeCollectionReference_1<Map<String, dynamic>>(
              this,
              Invocation.getter(#parent),
            ),
          )
          as _i2.CollectionReference<Map<String, dynamic>>);

  @override
  String get path =>
      (super.noSuchMethod(
            Invocation.getter(#path),
            returnValue: _i5.dummyValue<String>(this, Invocation.getter(#path)),
          )
          as String);

  @override
  _i2.CollectionReference<Map<String, dynamic>> collection(
    String? collectionPath,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#collection, [collectionPath]),
            returnValue: _FakeCollectionReference_1<Map<String, dynamic>>(
              this,
              Invocation.method(#collection, [collectionPath]),
            ),
          )
          as _i2.CollectionReference<Map<String, dynamic>>);

  @override
  _i3.Future<void> delete() =>
      (super.noSuchMethod(
            Invocation.method(#delete, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> update(Map<Object, Object?>? data) =>
      (super.noSuchMethod(
            Invocation.method(#update, [data]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<_i2.DocumentSnapshot<Map<String, dynamic>>> get([
    _i2.GetOptions? options,
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#get, [options]),
            returnValue:
                _i3.Future<_i2.DocumentSnapshot<Map<String, dynamic>>>.value(
                  _FakeDocumentSnapshot_10<Map<String, dynamic>>(
                    this,
                    Invocation.method(#get, [options]),
                  ),
                ),
          )
          as _i3.Future<_i2.DocumentSnapshot<Map<String, dynamic>>>);

  @override
  _i3.Stream<_i2.DocumentSnapshot<Map<String, dynamic>>> snapshots({
    bool? includeMetadataChanges = false,
    _i2.ListenSource? source = _i2.ListenSource.defaultSource,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#snapshots, [], {
              #includeMetadataChanges: includeMetadataChanges,
              #source: source,
            }),
            returnValue:
                _i3.Stream<_i2.DocumentSnapshot<Map<String, dynamic>>>.empty(),
          )
          as _i3.Stream<_i2.DocumentSnapshot<Map<String, dynamic>>>);

  @override
  _i3.Future<void> set(Map<String, dynamic>? data, [_i2.SetOptions? options]) =>
      (super.noSuchMethod(
            Invocation.method(#set, [data, options]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i2.DocumentReference<R> withConverter<R>({
    required _i2.FromFirestore<R>? fromFirestore,
    required _i2.ToFirestore<R>? toFirestore,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#withConverter, [], {
              #fromFirestore: fromFirestore,
              #toFirestore: toFirestore,
            }),
            returnValue: _FakeDocumentReference_6<R>(
              this,
              Invocation.method(#withConverter, [], {
                #fromFirestore: fromFirestore,
                #toFirestore: toFirestore,
              }),
            ),
          )
          as _i2.DocumentReference<R>);
}

/// A class which mocks [QuerySnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockQuerySnapshot extends _i1.Mock
    implements _i2.QuerySnapshot<Map<String, dynamic>> {
  MockQuerySnapshot() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i2.QueryDocumentSnapshot<Map<String, dynamic>>> get docs =>
      (super.noSuchMethod(
            Invocation.getter(#docs),
            returnValue: <_i2.QueryDocumentSnapshot<Map<String, dynamic>>>[],
          )
          as List<_i2.QueryDocumentSnapshot<Map<String, dynamic>>>);

  @override
  List<_i2.DocumentChange<Map<String, dynamic>>> get docChanges =>
      (super.noSuchMethod(
            Invocation.getter(#docChanges),
            returnValue: <_i2.DocumentChange<Map<String, dynamic>>>[],
          )
          as List<_i2.DocumentChange<Map<String, dynamic>>>);

  @override
  _i2.SnapshotMetadata get metadata =>
      (super.noSuchMethod(
            Invocation.getter(#metadata),
            returnValue: _FakeSnapshotMetadata_11(
              this,
              Invocation.getter(#metadata),
            ),
          )
          as _i2.SnapshotMetadata);

  @override
  int get size =>
      (super.noSuchMethod(Invocation.getter(#size), returnValue: 0) as int);
}

/// A class which mocks [QueryDocumentSnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockQueryDocSnapshot extends _i1.Mock
    implements _i2.QueryDocumentSnapshot<Map<String, dynamic>> {
  MockQueryDocSnapshot() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id =>
      (super.noSuchMethod(
            Invocation.getter(#id),
            returnValue: _i5.dummyValue<String>(this, Invocation.getter(#id)),
          )
          as String);

  @override
  _i2.DocumentReference<Map<String, dynamic>> get reference =>
      (super.noSuchMethod(
            Invocation.getter(#reference),
            returnValue: _FakeDocumentReference_6<Map<String, dynamic>>(
              this,
              Invocation.getter(#reference),
            ),
          )
          as _i2.DocumentReference<Map<String, dynamic>>);

  @override
  _i2.SnapshotMetadata get metadata =>
      (super.noSuchMethod(
            Invocation.getter(#metadata),
            returnValue: _FakeSnapshotMetadata_11(
              this,
              Invocation.getter(#metadata),
            ),
          )
          as _i2.SnapshotMetadata);

  @override
  bool get exists =>
      (super.noSuchMethod(Invocation.getter(#exists), returnValue: false)
          as bool);

  @override
  Map<String, dynamic> data() =>
      (super.noSuchMethod(
            Invocation.method(#data, []),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  dynamic get(Object? field) =>
      super.noSuchMethod(Invocation.method(#get, [field]));

  @override
  dynamic operator [](Object? field) =>
      super.noSuchMethod(Invocation.method(#[], [field]));
}

/// A class which mocks [DocumentSnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockDocSnapshot extends _i1.Mock
    implements _i2.DocumentSnapshot<Map<String, dynamic>> {
  MockDocSnapshot() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id =>
      (super.noSuchMethod(
            Invocation.getter(#id),
            returnValue: _i5.dummyValue<String>(this, Invocation.getter(#id)),
          )
          as String);

  @override
  _i2.DocumentReference<Map<String, dynamic>> get reference =>
      (super.noSuchMethod(
            Invocation.getter(#reference),
            returnValue: _FakeDocumentReference_6<Map<String, dynamic>>(
              this,
              Invocation.getter(#reference),
            ),
          )
          as _i2.DocumentReference<Map<String, dynamic>>);

  @override
  _i2.SnapshotMetadata get metadata =>
      (super.noSuchMethod(
            Invocation.getter(#metadata),
            returnValue: _FakeSnapshotMetadata_11(
              this,
              Invocation.getter(#metadata),
            ),
          )
          as _i2.SnapshotMetadata);

  @override
  bool get exists =>
      (super.noSuchMethod(Invocation.getter(#exists), returnValue: false)
          as bool);

  @override
  dynamic get(Object? field) =>
      super.noSuchMethod(Invocation.method(#get, [field]));

  @override
  dynamic operator [](Object? field) =>
      super.noSuchMethod(Invocation.method(#[], [field]));
}
