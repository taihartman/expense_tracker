// Mocks generated by Mockito 5.4.6 from annotations
// in expense_tracker/test/features/categories/presentation/widgets/category_selector_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:expense_tracker/features/categories/domain/models/category.dart'
    as _i3;
import 'package:expense_tracker/features/categories/domain/repositories/category_repository.dart'
    as _i7;
import 'package:expense_tracker/features/categories/presentation/cubit/category_cubit.dart'
    as _i4;
import 'package:expense_tracker/features/categories/presentation/cubit/category_state.dart'
    as _i2;
import 'package:flutter_bloc/flutter_bloc.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCategoryState_0 extends _i1.SmartFake implements _i2.CategoryState {
  _FakeCategoryState_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCategory_1 extends _i1.SmartFake implements _i3.Category {
  _FakeCategory_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [CategoryCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockCategoryCubit extends _i1.Mock implements _i4.CategoryCubit {
  MockCategoryCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CategoryState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeCategoryState_0(this, Invocation.getter(#state)),
          )
          as _i2.CategoryState);

  @override
  _i5.Stream<_i2.CategoryState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i5.Stream<_i2.CategoryState>.empty(),
          )
          as _i5.Stream<_i2.CategoryState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  void loadTopCategories({int? limit = 5}) => super.noSuchMethod(
    Invocation.method(#loadTopCategories, [], {#limit: limit}),
    returnValueForMissingStub: null,
  );

  @override
  void loadTopCategoriesIfStale({int? limit = 5}) => super.noSuchMethod(
    Invocation.method(#loadTopCategoriesIfStale, [], {#limit: limit}),
    returnValueForMissingStub: null,
  );

  @override
  void invalidateTopCategoriesCache() => super.noSuchMethod(
    Invocation.method(#invalidateTopCategoriesCache, []),
    returnValueForMissingStub: null,
  );

  @override
  void searchCategories(String? query) => super.noSuchMethod(
    Invocation.method(#searchCategories, [query]),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<void> createCategory({
    required String? name,
    String? icon = 'label',
    required String? color,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createCategory, [], {
              #name: name,
              #icon: icon,
              #color: color,
            }),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> incrementCategoryUsage(String? categoryId) =>
      (super.noSuchMethod(
            Invocation.method(#incrementCategoryUsage, [categoryId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> checkRateLimit() =>
      (super.noSuchMethod(
            Invocation.method(#checkRateLimit, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> loadCategoriesByIds(List<String>? ids) =>
      (super.noSuchMethod(
            Invocation.method(#loadCategoriesByIds, [ids]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i3.Category? getCategoryById(String? categoryId) =>
      (super.noSuchMethod(Invocation.method(#getCategoryById, [categoryId]))
          as _i3.Category?);

  @override
  _i5.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  void emit(_i2.CategoryState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void onChange(_i6.Change<_i2.CategoryState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [CategoryRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCategoryRepository extends _i1.Mock
    implements _i7.CategoryRepository {
  MockCategoryRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Stream<List<_i3.Category>> getTopCategories({int? limit = 5}) =>
      (super.noSuchMethod(
            Invocation.method(#getTopCategories, [], {#limit: limit}),
            returnValue: _i5.Stream<List<_i3.Category>>.empty(),
          )
          as _i5.Stream<List<_i3.Category>>);

  @override
  _i5.Stream<List<_i3.Category>> searchCategories(String? query) =>
      (super.noSuchMethod(
            Invocation.method(#searchCategories, [query]),
            returnValue: _i5.Stream<List<_i3.Category>>.empty(),
          )
          as _i5.Stream<List<_i3.Category>>);

  @override
  _i5.Future<_i3.Category?> getCategoryById(String? categoryId) =>
      (super.noSuchMethod(
            Invocation.method(#getCategoryById, [categoryId]),
            returnValue: _i5.Future<_i3.Category?>.value(),
          )
          as _i5.Future<_i3.Category?>);

  @override
  _i5.Future<List<_i3.Category>> getCategoriesByIds(List<String>? ids) =>
      (super.noSuchMethod(
            Invocation.method(#getCategoriesByIds, [ids]),
            returnValue: _i5.Future<List<_i3.Category>>.value(<_i3.Category>[]),
          )
          as _i5.Future<List<_i3.Category>>);

  @override
  _i5.Future<_i3.Category> createCategory({
    required String? name,
    String? icon = 'label',
    required String? color,
    required String? userId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createCategory, [], {
              #name: name,
              #icon: icon,
              #color: color,
              #userId: userId,
            }),
            returnValue: _i5.Future<_i3.Category>.value(
              _FakeCategory_1(
                this,
                Invocation.method(#createCategory, [], {
                  #name: name,
                  #icon: icon,
                  #color: color,
                  #userId: userId,
                }),
              ),
            ),
          )
          as _i5.Future<_i3.Category>);

  @override
  _i5.Future<void> incrementCategoryUsage(String? categoryId) =>
      (super.noSuchMethod(
            Invocation.method(#incrementCategoryUsage, [categoryId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<bool> categoryExists(String? name) =>
      (super.noSuchMethod(
            Invocation.method(#categoryExists, [name]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<bool> canUserCreateCategory(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#canUserCreateCategory, [userId]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<List<_i3.Category>> seedDefaultCategories() =>
      (super.noSuchMethod(
            Invocation.method(#seedDefaultCategories, []),
            returnValue: _i5.Future<List<_i3.Category>>.value(<_i3.Category>[]),
          )
          as _i5.Future<List<_i3.Category>>);

  @override
  _i5.Future<List<_i7.SimilarCategoryMatch>> findSimilarCategories(
    String? query, {
    double? threshold = 0.8,
    int? limit = 3,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #findSimilarCategories,
              [query],
              {#threshold: threshold, #limit: limit},
            ),
            returnValue: _i5.Future<List<_i7.SimilarCategoryMatch>>.value(
              <_i7.SimilarCategoryMatch>[],
            ),
          )
          as _i5.Future<List<_i7.SimilarCategoryMatch>>);

  @override
  _i5.Future<String?> getMostPopularIcon(String? categoryId) =>
      (super.noSuchMethod(
            Invocation.method(#getMostPopularIcon, [categoryId]),
            returnValue: _i5.Future<String?>.value(),
          )
          as _i5.Future<String?>);
}
