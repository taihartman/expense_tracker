// Mocks generated by Mockito 5.4.6 from annotations
// in expense_tracker/test/features/categories/presentation/cubit/category_customization_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:expense_tracker/core/models/category_customization.dart' as _i4;
import 'package:expense_tracker/core/repositories/category_customization_repository.dart'
    as _i2;
import 'package:expense_tracker/features/trips/domain/models/activity_log.dart'
    as _i6;
import 'package:expense_tracker/features/trips/domain/repositories/activity_log_repository.dart'
    as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [CategoryCustomizationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCategoryCustomizationRepository extends _i1.Mock
    implements _i2.CategoryCustomizationRepository {
  MockCategoryCustomizationRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<List<_i4.CategoryCustomization>> getCustomizationsForTrip(
    String? tripId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getCustomizationsForTrip, [tripId]),
            returnValue: _i3.Stream<List<_i4.CategoryCustomization>>.empty(),
          )
          as _i3.Stream<List<_i4.CategoryCustomization>>);

  @override
  _i3.Future<_i4.CategoryCustomization?> getCustomization(
    String? tripId,
    String? categoryId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getCustomization, [tripId, categoryId]),
            returnValue: _i3.Future<_i4.CategoryCustomization?>.value(),
          )
          as _i3.Future<_i4.CategoryCustomization?>);

  @override
  _i3.Future<void> saveCustomization(
    _i4.CategoryCustomization? customization,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#saveCustomization, [customization]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> deleteCustomization(String? tripId, String? categoryId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteCustomization, [tripId, categoryId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}

/// A class which mocks [ActivityLogRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockActivityLogRepository extends _i1.Mock
    implements _i5.ActivityLogRepository {
  MockActivityLogRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<String> addLog(_i6.ActivityLog? log) =>
      (super.noSuchMethod(
            Invocation.method(#addLog, [log]),
            returnValue: _i3.Future<String>.value(
              _i7.dummyValue<String>(this, Invocation.method(#addLog, [log])),
            ),
          )
          as _i3.Future<String>);

  @override
  _i3.Stream<List<_i6.ActivityLog>> getActivityLogs(
    String? tripId, {
    int? limit = 50,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getActivityLogs, [tripId], {#limit: limit}),
            returnValue: _i3.Stream<List<_i6.ActivityLog>>.empty(),
          )
          as _i3.Stream<List<_i6.ActivityLog>>);
}
