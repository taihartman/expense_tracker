// Mocks generated by Mockito 5.4.6 from annotations
// in expense_tracker/test/widget/features/expenses/expense_form_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:expense_tracker/core/models/currency_code.dart' as _i10;
import 'package:expense_tracker/core/models/participant.dart' as _i11;
import 'package:expense_tracker/features/expenses/domain/models/expense.dart'
    as _i5;
import 'package:expense_tracker/features/expenses/presentation/cubits/expense_cubit.dart'
    as _i4;
import 'package:expense_tracker/features/expenses/presentation/cubits/expense_state.dart'
    as _i2;
import 'package:expense_tracker/features/trips/domain/models/activity_log.dart'
    as _i12;
import 'package:expense_tracker/features/trips/domain/models/trip.dart' as _i9;
import 'package:expense_tracker/features/trips/domain/models/trip_recovery_code.dart'
    as _i14;
import 'package:expense_tracker/features/trips/domain/models/verified_member.dart'
    as _i15;
import 'package:expense_tracker/features/trips/presentation/cubits/trip_cubit.dart'
    as _i8;
import 'package:expense_tracker/features/trips/presentation/cubits/trip_state.dart'
    as _i3;
import 'package:flutter_bloc/flutter_bloc.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i13;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeExpenseState_0 extends _i1.SmartFake implements _i2.ExpenseState {
  _FakeExpenseState_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTripState_1 extends _i1.SmartFake implements _i3.TripState {
  _FakeTripState_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ExpenseCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockExpenseCubit extends _i1.Mock implements _i4.ExpenseCubit {
  MockExpenseCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i5.Expense> get expenses =>
      (super.noSuchMethod(
            Invocation.getter(#expenses),
            returnValue: <_i5.Expense>[],
          )
          as List<_i5.Expense>);

  @override
  _i2.ExpenseState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeExpenseState_0(this, Invocation.getter(#state)),
          )
          as _i2.ExpenseState);

  @override
  _i6.Stream<_i2.ExpenseState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i6.Stream<_i2.ExpenseState>.empty(),
          )
          as _i6.Stream<_i2.ExpenseState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  _i6.Future<void> loadExpenses(String? tripId) =>
      (super.noSuchMethod(
            Invocation.method(#loadExpenses, [tripId]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> createExpense(_i5.Expense? expense, {String? actorName}) =>
      (super.noSuchMethod(
            Invocation.method(
              #createExpense,
              [expense],
              {#actorName: actorName},
            ),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> updateExpense(_i5.Expense? expense, {String? actorName}) =>
      (super.noSuchMethod(
            Invocation.method(
              #updateExpense,
              [expense],
              {#actorName: actorName},
            ),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> deleteExpense(String? expenseId, {String? actorName}) =>
      (super.noSuchMethod(
            Invocation.method(
              #deleteExpense,
              [expenseId],
              {#actorName: actorName},
            ),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  void selectExpense(_i5.Expense? expense) => super.noSuchMethod(
    Invocation.method(#selectExpense, [expense]),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  void emit(_i2.ExpenseState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void onChange(_i7.Change<_i2.ExpenseState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [TripCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockTripCubit extends _i1.Mock implements _i8.TripCubit {
  MockTripCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i9.Trip> get trips =>
      (super.noSuchMethod(Invocation.getter(#trips), returnValue: <_i9.Trip>[])
          as List<_i9.Trip>);

  @override
  _i3.TripState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeTripState_1(this, Invocation.getter(#state)),
          )
          as _i3.TripState);

  @override
  _i6.Stream<_i3.TripState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i6.Stream<_i3.TripState>.empty(),
          )
          as _i6.Stream<_i3.TripState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  _i6.Future<void> loadTrips() =>
      (super.noSuchMethod(
            Invocation.method(#loadTrips, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> createTrip({
    required String? name,
    required _i10.CurrencyCode? baseCurrency,
    String? creatorName,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createTrip, [], {
              #name: name,
              #baseCurrency: baseCurrency,
              #creatorName: creatorName,
            }),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> selectTrip(_i9.Trip? trip) =>
      (super.noSuchMethod(
            Invocation.method(#selectTrip, [trip]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> updateTrip(_i9.Trip? trip) =>
      (super.noSuchMethod(
            Invocation.method(#updateTrip, [trip]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> updateTripDetails({
    required String? tripId,
    required String? name,
    required _i10.CurrencyCode? baseCurrency,
    String? actorName,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#updateTripDetails, [], {
              #tripId: tripId,
              #name: name,
              #baseCurrency: baseCurrency,
              #actorName: actorName,
            }),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> deleteTrip(String? tripId, {String? actorName}) =>
      (super.noSuchMethod(
            Invocation.method(#deleteTrip, [tripId], {#actorName: actorName}),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> archiveTrip(String? tripId, {String? actorName}) =>
      (super.noSuchMethod(
            Invocation.method(#archiveTrip, [tripId], {#actorName: actorName}),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> unarchiveTrip(String? tripId, {String? actorName}) =>
      (super.noSuchMethod(
            Invocation.method(
              #unarchiveTrip,
              [tripId],
              {#actorName: actorName},
            ),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> leaveTrip(String? tripId) =>
      (super.noSuchMethod(
            Invocation.method(#leaveTrip, [tripId]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> addParticipant({
    required String? tripId,
    required _i11.Participant? participant,
    String? actorName,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#addParticipant, [], {
              #tripId: tripId,
              #participant: participant,
              #actorName: actorName,
            }),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> removeParticipant({
    required String? tripId,
    required _i11.Participant? participant,
    String? actorName,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#removeParticipant, [], {
              #tripId: tripId,
              #participant: participant,
              #actorName: actorName,
            }),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> joinTrip({
    required String? tripId,
    required String? userName,
    _i12.JoinMethod? joinMethod,
    String? invitedByParticipantId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#joinTrip, [], {
              #tripId: tripId,
              #userName: userName,
              #joinMethod: joinMethod,
              #invitedByParticipantId: invitedByParticipantId,
            }),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<bool> hasDuplicateMember(String? tripId, String? memberName) =>
      (super.noSuchMethod(
            Invocation.method(#hasDuplicateMember, [tripId, memberName]),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  bool isUserMemberOf(String? tripId) =>
      (super.noSuchMethod(
            Invocation.method(#isUserMemberOf, [tripId]),
            returnValue: false,
          )
          as bool);

  @override
  _i6.Future<_i9.Trip?> getTripById(String? tripId) =>
      (super.noSuchMethod(
            Invocation.method(#getTripById, [tripId]),
            returnValue: _i6.Future<_i9.Trip?>.value(),
          )
          as _i6.Future<_i9.Trip?>);

  @override
  _i6.Future<String> generateRecoveryCode(String? tripId) =>
      (super.noSuchMethod(
            Invocation.method(#generateRecoveryCode, [tripId]),
            returnValue: _i6.Future<String>.value(
              _i13.dummyValue<String>(
                this,
                Invocation.method(#generateRecoveryCode, [tripId]),
              ),
            ),
          )
          as _i6.Future<String>);

  @override
  _i6.Future<_i14.TripRecoveryCode?> getRecoveryCode(String? tripId) =>
      (super.noSuchMethod(
            Invocation.method(#getRecoveryCode, [tripId]),
            returnValue: _i6.Future<_i14.TripRecoveryCode?>.value(),
          )
          as _i6.Future<_i14.TripRecoveryCode?>);

  @override
  _i6.Future<bool> hasRecoveryCode(String? tripId) =>
      (super.noSuchMethod(
            Invocation.method(#hasRecoveryCode, [tripId]),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Future<bool> validateAndJoinWithRecoveryCode({
    required String? tripId,
    required String? code,
    required String? userName,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#validateAndJoinWithRecoveryCode, [], {
              #tripId: tripId,
              #code: code,
              #userName: userName,
            }),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i11.Participant? getCurrentUserForTrip(String? tripId) =>
      (super.noSuchMethod(Invocation.method(#getCurrentUserForTrip, [tripId]))
          as _i11.Participant?);

  @override
  _i6.Future<List<_i15.VerifiedMember>> getVerifiedMembers(String? tripId) =>
      (super.noSuchMethod(
            Invocation.method(#getVerifiedMembers, [tripId]),
            returnValue: _i6.Future<List<_i15.VerifiedMember>>.value(
              <_i15.VerifiedMember>[],
            ),
          )
          as _i6.Future<List<_i15.VerifiedMember>>);

  @override
  _i6.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  void emit(_i3.TripState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void onChange(_i7.Change<_i3.TripState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}
