// Mocks generated by Mockito 5.4.6 from annotations
// in expense_tracker/test/widget/features/device_pairing/presentation/widgets/code_verification_prompt_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:expense_tracker/features/device_pairing/presentation/cubits/device_pairing_cubit.dart'
    as _i2;
import 'package:expense_tracker/features/device_pairing/presentation/cubits/device_pairing_state.dart'
    as _i3;
import 'package:flutter_bloc/flutter_bloc.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [DevicePairingCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockDevicePairingCubit extends _i1.Mock
    implements _i2.DevicePairingCubit {
  @override
  _i3.DevicePairingState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _i4.dummyValue<_i3.DevicePairingState>(
              this,
              Invocation.getter(#state),
            ),
            returnValueForMissingStub: _i4.dummyValue<_i3.DevicePairingState>(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i3.DevicePairingState);

  @override
  _i5.Stream<_i3.DevicePairingState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i5.Stream<_i3.DevicePairingState>.empty(),
            returnValueForMissingStub:
                _i5.Stream<_i3.DevicePairingState>.empty(),
          )
          as _i5.Stream<_i3.DevicePairingState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(
            Invocation.getter(#isClosed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i5.Future<void> generateCode(String? tripId, String? memberName) =>
      (super.noSuchMethod(
            Invocation.method(#generateCode, [tripId, memberName]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> validateCode(
    String? tripId,
    String? code,
    String? memberName,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#validateCode, [tripId, code, memberName]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> revokeCode(String? tripId, String? codeId) =>
      (super.noSuchMethod(
            Invocation.method(#revokeCode, [tripId, codeId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> loadActiveCodes(String? tripId) =>
      (super.noSuchMethod(
            Invocation.method(#loadActiveCodes, [tripId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  void emit(_i3.DevicePairingState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void onChange(_i6.Change<_i3.DevicePairingState>? change) =>
      super.noSuchMethod(
        Invocation.method(#onChange, [change]),
        returnValueForMissingStub: null,
      );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}
