// Mocks generated by Mockito 5.4.6 from annotations
// in expense_tracker/test/integration/category_customization_flow_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:expense_tracker/core/models/category_customization.dart' as _i5;
import 'package:expense_tracker/core/repositories/category_customization_repository.dart'
    as _i3;
import 'package:expense_tracker/features/categories/presentation/cubit/category_cubit.dart'
    as _i9;
import 'package:expense_tracker/features/categories/presentation/cubit/category_state.dart'
    as _i2;
import 'package:expense_tracker/features/trips/domain/models/activity_log.dart'
    as _i7;
import 'package:expense_tracker/features/trips/domain/repositories/activity_log_repository.dart'
    as _i6;
import 'package:flutter_bloc/flutter_bloc.dart' as _i10;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCategoryState_0 extends _i1.SmartFake implements _i2.CategoryState {
  _FakeCategoryState_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [CategoryCustomizationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCategoryCustomizationRepository extends _i1.Mock
    implements _i3.CategoryCustomizationRepository {
  MockCategoryCustomizationRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<List<_i5.CategoryCustomization>> getCustomizationsForTrip(
    String? tripId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getCustomizationsForTrip, [tripId]),
            returnValue: _i4.Stream<List<_i5.CategoryCustomization>>.empty(),
          )
          as _i4.Stream<List<_i5.CategoryCustomization>>);

  @override
  _i4.Future<_i5.CategoryCustomization?> getCustomization(
    String? tripId,
    String? categoryId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getCustomization, [tripId, categoryId]),
            returnValue: _i4.Future<_i5.CategoryCustomization?>.value(),
          )
          as _i4.Future<_i5.CategoryCustomization?>);

  @override
  _i4.Future<void> saveCustomization(
    _i5.CategoryCustomization? customization,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#saveCustomization, [customization]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteCustomization(String? tripId, String? categoryId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteCustomization, [tripId, categoryId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [ActivityLogRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockActivityLogRepository extends _i1.Mock
    implements _i6.ActivityLogRepository {
  MockActivityLogRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<String> addLog(_i7.ActivityLog? log) =>
      (super.noSuchMethod(
            Invocation.method(#addLog, [log]),
            returnValue: _i4.Future<String>.value(
              _i8.dummyValue<String>(this, Invocation.method(#addLog, [log])),
            ),
          )
          as _i4.Future<String>);

  @override
  _i4.Stream<List<_i7.ActivityLog>> getActivityLogs(
    String? tripId, {
    int? limit = 50,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getActivityLogs, [tripId], {#limit: limit}),
            returnValue: _i4.Stream<List<_i7.ActivityLog>>.empty(),
          )
          as _i4.Stream<List<_i7.ActivityLog>>);
}

/// A class which mocks [CategoryCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockCategoryCubit extends _i1.Mock implements _i9.CategoryCubit {
  MockCategoryCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CategoryState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeCategoryState_0(this, Invocation.getter(#state)),
          )
          as _i2.CategoryState);

  @override
  _i4.Stream<_i2.CategoryState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i4.Stream<_i2.CategoryState>.empty(),
          )
          as _i4.Stream<_i2.CategoryState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  void loadTopCategories({int? limit = 5}) => super.noSuchMethod(
    Invocation.method(#loadTopCategories, [], {#limit: limit}),
    returnValueForMissingStub: null,
  );

  @override
  void searchCategories(String? query) => super.noSuchMethod(
    Invocation.method(#searchCategories, [query]),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Future<void> createCategory({
    required String? name,
    String? icon = 'label',
    required String? color,
    required String? userId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createCategory, [], {
              #name: name,
              #icon: icon,
              #color: color,
              #userId: userId,
            }),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> incrementCategoryUsage(String? categoryId) =>
      (super.noSuchMethod(
            Invocation.method(#incrementCategoryUsage, [categoryId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> checkRateLimit(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#checkRateLimit, [userId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  void emit(_i2.CategoryState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void onChange(_i10.Change<_i2.CategoryState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}
